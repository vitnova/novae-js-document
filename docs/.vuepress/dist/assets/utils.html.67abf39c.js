import{_ as n,o as s,c as a,a as t}from"./app.89bfc664.js";const e={},p=t(`<h1 id="实用工具库" tabindex="-1"><a class="header-anchor" href="#实用工具库" aria-hidden="true">#</a> 实用工具库</h1><p>  以下工具类均可从本框架默认入口直接导入，以下方所示方式。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> DataTypeTool<span class="token punctuation">,</span> DebugTool<span class="token punctuation">,</span> FunctionTool <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;novae-js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>  此种方法获取的为已实例化的工具类实体，不需要使用new标识符进行实例化，所以您就可以直接调用对应功能方法进行使用，如DataTypeTool.getItem(..)</p><h2 id="datatypetool" tabindex="-1"><a class="header-anchor" href="#datatypetool" aria-hidden="true">#</a> DataTypeTool</h2><p>  关于数据类型的功能类</p><h3 id="getitem" tabindex="-1"><a class="header-anchor" href="#getitem" aria-hidden="true">#</a> getItem</h3><p>  链式获取某一对象中的属性，对应属性为<code>undefined</code>或<code>null</code>则返回<code>nullData</code>值。</p><ul><li><p>参数列表</p><ol><li><code>object</code> (Object): 从哪个对象获取</li><li><code>item = &quot;&quot;</code> (string): 属性路径</li><li><code>nullData = &quot;&quot;</code> (*): 默认值</li></ol></li><li><p>返回值</p><p>(*): 获取到的属性值</p></li><li><p>异常</p><ol><li>参数类型错误：<code>Parameter type error</code>，造成原因可能是<code>item</code>参数不为<code>string</code>类型，具体见控制台调试工具的提示。</li></ol></li><li><p>例子</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;a.b&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; 1</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;a.b.c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fail&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; &quot;fail&quot;</span>

DataTypeTool<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&quot;a.b.c&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;fail&quot;</span><span class="token punctuation">)</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">&quot;fail&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; &quot;fail&quot;</span>
<span class="token comment">// object参数为任何非对象类型或item参数不为string类型将直接返回nullData值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>备注</p><ol><li><code>nullData</code>参数项请不要传入<code>undefined</code>，Javascript视<code>undefined</code>为未传入参数项，会继续使用默认的<code>&quot;&quot;</code>值。</li></ol></li></ul><h3 id="isempty" tabindex="-1"><a class="header-anchor" href="#isempty" aria-hidden="true">#</a> isEmpty</h3><p>  判断变量是否为有意义的值。</p><ul><li><p>参数列表</p><ol><li><code>o</code> (*): 欲判断的变量</li></ol></li><li><p>返回值</p><p>(boolean): <code>true</code>为无意义，<code>false</code>为有意义</p></li><li><p>例子</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token boolean">false</span>
<span class="token comment">// =&gt; true</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
	
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; false</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token string">&quot;123&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; false</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; false</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="isnotempty" tabindex="-1"><a class="header-anchor" href="#isnotempty" aria-hidden="true">#</a> isNotEmpty</h3><p>  判断变量是否为有意义的值，返回值与isEmpty方法相反。</p><ul><li><p>参数列表</p><ol><li><code>o</code> (*): 欲判断的变量</li></ol></li><li><p>返回值</p><p>(boolean): <code>true</code>为有意义，<code>false</code>为无意义</p></li></ul><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> run</h3><p>  以安全形式运行函数，对应函数不存在不会阻塞下方代码的运行，未找到函数则返回<code>nullData</code>，找到函数后无论返回值是否为空均返回该值。</p><ul><li><p>参数列表</p><ol><li><code>object</code> (Object): 从哪个对象获取</li><li><code>functionName = &quot;&quot;</code> (string): 函数属性路径</li><li><code>nullData = false</code> (*): 默认值</li></ol></li><li><p>返回值</p><p>(*): 函数返回值</p></li><li><p>异常</p><ol><li>参数类型错误：<code>Parameter type error</code>，造成原因可能是<code>functionName</code>参数不为<code>string</code>类型，具体见控制台调试工具的提示。</li></ol></li><li><p>例子</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> o <span class="token operator">=</span> <span class="token punctuation">{</span> 
			<span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">&quot;success&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
			<span class="token function-variable function">fn1</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> a<span class="token punctuation">}</span>
	  <span class="token punctuation">}</span>

<span class="token comment">// 在对象中找到函数</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">&quot;fn&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; &quot;success</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">&quot;fn1&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; 1</span>

<span class="token comment">// 在对象中未找到函数</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; false</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;null&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; &quot;null</span>

<span class="token comment">// 对象不是object类型</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; false</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>备注</p><ol><li>建议您不要滥用此方法，此方法适用于运行在某些对象中可能已定义也可能未定义的方法，并且不会因该方法的未运行影响最后的结果，更适用于运行钩子函数这种场景。</li></ol></li></ul><h3 id="fromjson" tabindex="-1"><a class="header-anchor" href="#fromjson" aria-hidden="true">#</a> fromJSON</h3><p>  将JSON字符串转为对象</p><ul><li><p>参数列表</p><ol><li><code>str</code> (string): JSON字符串</li></ol></li><li><p>返回值</p><p>(Object/Array): 字符串转换后的对象或数组</p></li><li><p>异常</p><ol><li>JSON字符串格式错误：<code>Uncaught SyntaxError: Unexpected end of JSON input</code></li></ol></li></ul><h3 id="tojsonstring" tabindex="-1"><a class="header-anchor" href="#tojsonstring" aria-hidden="true">#</a> toJSONString</h3><p>  将对象转为JSON字符串</p><ul><li><p>参数列表</p><ol><li><code>obj</code> (Object): 对象</li></ol></li><li><p>返回值</p><p>(string): JSON字符串</p></li><li><p>备注</p><ol><li>若对象中存在属性值为<code>undefined</code>的情况，转换后的JSON字符串中将抹去对应属性，不会出现<code>... : undefined</code>的现象；</li><li>出现无法转换为JSON字符串的属性值如<code>function</code>等，同<code>undefined</code>。</li></ol></li></ul><h3 id="deleteitem" tabindex="-1"><a class="header-anchor" href="#deleteitem" aria-hidden="true">#</a> deleteItem</h3><p>  以安全方式删除对象中的属性，删除数组对应下标，并将之后的序列递补。</p><ul><li><p>参数列表</p><ol><li><code>o</code> (Object/Array): 源对象</li><li><code>key</code> (string/Number): 欲删除的属性或下标</li></ol></li><li><p>返回值</p><p>(boolean): <code>true</code>为删除成功，<code>false</code>为删除失败</p></li><li><p>例子</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

DataTypeTool<span class="token punctuation">.</span><span class="token function">deleteItem</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&quot;a&quot;</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
<span class="token comment">// obj = {}</span>

DataTypeTool<span class="token punctuation">.</span><span class="token function">deleteItem</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>
<span class="token comment">// arr = []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="equals" tabindex="-1"><a class="header-anchor" href="#equals" aria-hidden="true">#</a> equals</h3><p>  判断两个对象的属性以及属性值是否相等，并且可以获取差异，其中相同的定义为属性完全相同，属性值完全相同（会判别基本类型的值，而非地址）。</p><ul><li><p>参数列表</p><ol><li><code>a</code> (Object): 源对象</li><li><code>b</code> (Object): 欲删除的属性或下标</li><li><code>getDiff = true</code> (boolean): <code>true</code>为返回两个对象的差异，<code>false</code>为只返回两对象是否相等</li></ol></li><li><p>返回值</p><p>(*):</p><p><code>getDiff</code>为<code>true</code>的情况下，返回值为以下类型</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
  <span class="token literal-property property">result</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// a与b是否相等</span>
  <span class="token literal-property property">add</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// a变为b需要新增的属性名与属性值</span>
  <span class="token literal-property property">change</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// a变为b需要改变的属性名与属性值</span>
  <span class="token keyword">delete</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment">// a变为b需要删除的属性</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>getDiff</code>为<code>false</code>的情况下，返回值<code>true</code>为相等，<code>false</code>为不相等，</p></li><li><p>例子</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">}</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; true</span>

<span class="token keyword">let</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token punctuation">,</span> obj4 <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>obj3<span class="token punctuation">,</span> obj4<span class="token punctuation">)</span>
<span class="token comment">// =&gt; {</span>
<span class="token comment">//   result: false,</span>
<span class="token comment">// 	 add: {</span>
<span class="token comment">//		b: {}</span>
<span class="token comment">//   },</span>
<span class="token comment">//   change: {</span>
<span class="token comment">//		a: {</span>
<span class="token comment">//			c: {}</span>
<span class="token comment">//		}</span>
<span class="token comment">//   },</span>
<span class="token comment">//	 delete: [&quot;d&quot;]</span>
<span class="token comment">// }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>备注</p><ol><li>本方法只支持比较两对象的第一层属性，不会计算出对象属性的属性的差异，即若<code>a</code>与<code>b</code>的同一属性对应的值有一点差异，就会在<code>change</code>中体现出<code>b</code>对应完整的新属性。</li></ol></li></ul><h3 id="tostring" tabindex="-1"><a class="header-anchor" href="#tostring" aria-hidden="true">#</a> toString</h3><p>  将对应变量转换为字符串，如要与类型绑定请见<a href="#bindtostring">bindToString</a>。</p><ul><li><p>参数列表</p><ol><li><code>o</code> (*): 源对象，可以为对象、数组也可以为基本类型</li><li><code>except = []</code> (Array): 不转为字符串的属性名数组，<code>o</code>为基本类型或数组则不生效</li></ol></li><li><p>返回值</p><p>(string): 转换后的字符串</p></li><li><p>异常</p><ol><li>参数类型错误：<code>Parameter type error</code>，造成原因可能是<code>except</code>参数不为<code>Array</code>类型，具体见控制台调试工具的提示。</li></ol></li><li><p>例子</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; &quot;{a: 0}&quot;</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
DataTypeTool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>
<span class="token comment">// =&gt; &quot;[1,2]&quot;</span>

DataTypeTool<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>
<span class="token comment">// =&gt; &quot;123&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>备注</p><ol><li>本方法会排除掉<code>function</code>类型的属性值。</li></ol></li></ul><h3 id="bindtostring" tabindex="-1"><a class="header-anchor" href="#bindtostring" aria-hidden="true">#</a> bindToString</h3><p>  将<a href="#tostring">toString</a>方法绑定到对象的toString方法上。</p><ul><li><p>参数列表</p><ol><li><code>except = []</code> (Array): 不转为字符串的属性名数组</li></ol></li><li><p>返回值</p><p>(function): 与对象绑定的toString方法</p></li><li><p>异常</p><ol><li>参数类型错误：<code>Parameter type error</code>，造成原因可能是<code>except</code>参数不为<code>Array</code>类型，具体见控制台调试工具的提示。</li></ol></li><li><p>例子</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span>
obj<span class="token punctuation">.</span>toString <span class="token operator">=</span> DataTypeTool<span class="token punctuation">.</span><span class="token function">bindToString</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&quot;b&quot;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>
<span class="token comment">// =&gt; &quot;{a: 0}&quot;</span>

<span class="token comment">// 与ES6中class绑定</span>
<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>
	<span class="token operator">...</span>
	<span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> DataTypeTool<span class="token punctuation">.</span><span class="token function">bindToString</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">}</span>

<span class="token comment">// ES6前与构造函数绑定</span>
<span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span>
<span class="token class-name">B</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString <span class="token operator">=</span> DataTypeTool<span class="token punctuation">.</span><span class="token function">bindToString</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>备注</p><ol><li>生成的字符串会排除掉<code>function</code>类型的属性值。</li></ol></li></ul><h3 id="inherit" tabindex="-1"><a class="header-anchor" href="#inherit" aria-hidden="true">#</a> inherit</h3><p>  在不使用ES6规范情况下，以寄生组合式方法实现类继承。</p><ul><li><p>参数列表</p><ol><li><code>father</code> (Function): 父类构造函数</li><li><code>child</code> (Function): 子类构造函数</li></ol></li><li><p>返回值</p><p>(Function): 继承后的子类构造函数</p></li><li><p>异常</p><ol><li>参数类型错误：<code>Parameter type error</code>，造成原因可能是<code>father</code>参数或<code>child</code>参数不为<code>Function</code>类型，具体见控制台调试工具的提示。</li></ol></li><li><p>例子</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">let</span> newB <span class="token operator">=</span> DataTypeTool<span class="token punctuation">.</span><span class="token function">inherit</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">,</span> <span class="token constant">B</span><span class="token punctuation">)</span>
<span class="token keyword">new</span> <span class="token class-name">newB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">instanceof</span> <span class="token class-name">A</span>
<span class="token comment">// =&gt; true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>备注</p><ol><li>此方法会改变原<code>child</code>参数，即返回值与<code>child</code>参数相同。</li></ol></li></ul><h2 id="debugtool" tabindex="-1"><a class="header-anchor" href="#debugtool" aria-hidden="true">#</a> DebugTool</h2><p>  框架调试及环境诊断工具。</p><h3 id="isinbrowser" tabindex="-1"><a class="header-anchor" href="#isinbrowser" aria-hidden="true">#</a> isInBrowser</h3><p>  判断代码运行环境是否为浏览器。</p><ul><li><p>参数列表</p><p>空</p></li><li><p>返回值</p><p>(boolean): <code>true</code>为在浏览器中，<code>false</code>为不在浏览器中</p></li></ul><h3 id="isinnode" tabindex="-1"><a class="header-anchor" href="#isinnode" aria-hidden="true">#</a> isInNode</h3><p>  判断代码运行环境是否为Node.js。</p><ul><li><p>参数列表</p><p>空</p></li><li><p>返回值</p><p>(boolean): <code>true</code>为在Node.js中，<code>false</code>为不在Node.js中</p></li></ul><h2 id="functiontool" tabindex="-1"><a class="header-anchor" href="#functiontool" aria-hidden="true">#</a> FunctionTool</h2><p>  针对函数的工具包。</p><h3 id="debounce" tabindex="-1"><a class="header-anchor" href="#debounce" aria-hidden="true">#</a> debounce</h3><p>  防抖函数，将传入的函数延迟执行，若延迟等待过程中再次调用传入的函数则顺延重新计时，适用于监听scroll事件这种频繁触发的场景。</p><ul><li><p>参数列表</p><ol><li><code>fn</code> (Function): 延迟等待的函数方法</li><li><code>delay = 2000</code> (Number): 等待时间(ms)</li></ol></li><li><p>返回值</p><p>(Function): 加入防抖后的函数方法</p></li><li><p>例子</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span>

<span class="token keyword">const</span> newA <span class="token operator">=</span> DataTypeTool<span class="token punctuation">.</span><span class="token function">debounce</span><span class="token punctuation">(</span><span class="token constant">A</span><span class="token punctuation">)</span>
<span class="token function">newA</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span>newA<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>
<span class="token comment">// 3000ms后 =&gt; &quot;A&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>备注</p><ol><li>此方法不会改变原函数方法，使用防抖功能请调用本方法返回的新函数方法。</li></ol></li></ul>`,68),o=[p];function c(l,i){return s(),a("div",null,o)}const r=n(e,[["render",c],["__file","utils.html.vue"]]);export{r as default};
