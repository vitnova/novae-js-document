import{_ as s,r as t,o,c as p,b as n,d as a,e as c,w as r,a as l}from"./app.89bfc664.js";const i={},d=n("h1",{id:"虚拟路由",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#虚拟路由","aria-hidden":"true"},"#"),a(" 虚拟路由")],-1),u=n("h2",{id:"配置项",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#配置项","aria-hidden":"true"},"#"),a(" 配置项")],-1),h=n("code",null,"Novae.router",-1),m=l(`<h3 id="name" tabindex="-1"><a class="header-anchor" href="#name" aria-hidden="true">#</a> name</h3><p>  路由内置名称，可通过从框架入口导入的<a href="#goto"><code>goTo</code></a>方法转到。</p><ul><li><p>类型</p><p>string</p></li></ul><h3 id="url" tabindex="-1"><a class="header-anchor" href="#url" aria-hidden="true">#</a> url</h3><p>  在地址栏匹配的路径，支持自定义参数列表及正则表达式定义。</p><ul><li><p>类型</p><p>string | RegExp</p></li><li><p>自定义参数列表</p><p>以<code>/</code>分割，由<code>:</code>开头的项可被识别为参数项。 以<code>/courses/:courseID/:SNo/score</code>举例，中间的<code>:courseID</code>与<code>:sNo</code>可替换为任何符合规范的值，识别后会作为参数将<code>courseID</code>与<code>sNo</code>传入对应<code>component</code>中，并可以通过<code>this.params.参数名</code>调用。</p></li><li><p>正则表达式</p><p>该种方式会在所有自定义参数列表与普通方式下未搜索到路由时触发，优先度较低。</p></li></ul><h3 id="component" tabindex="-1"><a class="header-anchor" href="#component" aria-hidden="true">#</a> component</h3><p>  转到路由时渲染的组件。</p><ul><li><p>类型</p><p>CustomComponent</p></li></ul><h3 id="getparams" tabindex="-1"><a class="header-anchor" href="#getparams" aria-hidden="true">#</a> getParams</h3><p>  自定义从地址栏路径获取参数的方法。</p><ul><li><p>类型</p><p>Function</p></li><li><p>参数列表</p><ol><li><code>url</code> (string): 地址栏路径</li></ol></li><li><p>返回值</p><p>(Object): 属性名为参数名，属性值为参数值</p></li><li><p>备注</p><ol><li>得到的参数可以在<code>component</code>对应组件内通过<code>this.params.参数名</code>调用。</li></ol></li></ul><h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">[</span>
    <span class="token operator">...</span>
	<span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Score&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;/courses/:courseID/:SNo/score&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">component</span><span class="token operator">:</span> ScoreComponent
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;RegExp&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\/?regExp)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token comment">// 获取以regExp开头的路径</span>
		<span class="token function-variable function">getParams</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">name</span><span class="token operator">:</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">component</span><span class="token operator">:</span> RegExpTestComponent
	<span class="token punctuation">}</span>
	<span class="token operator">...</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><h3 id="goto" tabindex="-1"><a class="header-anchor" href="#goto" aria-hidden="true">#</a> goTo</h3><p>  跳转至指定路由。</p><ul><li><p>参数列表</p><ol><li><code>name</code> (string): 路由内置名</li><li><code>options</code> (object): 将传入<code>component</code>中构造函数参数列表的第一项，已实例化或构造函数未覆写的组件的将作为其<code>attribute</code>值；其中的<code>params</code>属性为路由参数对象，将来可在组件内以<code>this.params</code>的方式调用。</li><li><code>urlChanged = false</code> (boolean): 为<code>true</code>则不会更新history栈，为<code>false</code>反之，一般保持默认值即可，不需要特别配置。</li></ol></li><li><p>返回值</p><p>空</p></li></ul>`,18);function k(v,b){const e=t("RouterLink");return o(),p("div",null,[d,u,n("p",null,[a("  您需要从"),c(e,{to:"/documents/novae.html#router"},{default:r(()=>[h]),_:1}),a("方法传入以下形式的配置项。")]),m])}const x=s(i,[["render",k],["__file","router.html.vue"]]);export{x as default};
