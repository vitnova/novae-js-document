import{_ as p,r as c,o as l,c as i,b as s,d as n,e as t,w as e,a as o}from"./app.89bfc664.js";const r={},u=o(`<h1 id="快速入门" tabindex="-1"><a class="header-anchor" href="#快速入门" aria-hidden="true">#</a> 快速入门</h1><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> novae-js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="初始化" tabindex="-1"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Novae <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;novae-js&quot;</span>
Novae<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
	<span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">&quot;确定根元素的CSS选择符&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="创建一个双向绑定数据的有状态组件" tabindex="-1"><a class="header-anchor" href="#创建一个双向绑定数据的有状态组件" aria-hidden="true">#</a> 创建一个双向绑定数据的有状态组件</h2>`,6),d=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> AutoStatefulComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;novae-js&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),k=o(`<p>  然后覆写其<code>data</code>方法，返回将与模板绑定的数据的变量名作为属性名、变量值为属性值的对象，以后就可以以<code>this.属性名</code>的方式获取或修改。</p><p>  接着建立一个触发页面更新的函数，这里为<code>increase</code>方法，直接让我们的<code>number</code>变量自增，建议您将更新数据的方法定义为成员变量，这样<code>this</code>指向更为明确。</p><p>  随后覆写<code>template</code>方法，方法返回要渲染的模板组件，可以通过JSX形式定义（需使用框架对应JSX实现的babel插件），将组件内的值以<code>{</code> <code>}</code>包裹，这里需要将计数值<code>number</code>与事件回调<code>increase</code>作为文本出现或绑定到对应属性。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">TestComponent</span> <span class="token keyword">extends</span> <span class="token class-name">AutoStatefulComponent</span>
<span class="token punctuation">{</span>
	<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">number</span><span class="token operator">:</span> <span class="token number">0</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token function-variable function">increase</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		<span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>number
	<span class="token punctuation">}</span>
	<span class="token function">template</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;counter&quot;</span><span class="token operator">&gt;</span>
					<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>Number<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
					<span class="token operator">&lt;</span>p<span class="token operator">&gt;</span><span class="token operator">&lt;</span>button name<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> onclick<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token keyword">this</span><span class="token punctuation">.</span>increase <span class="token punctuation">}</span><span class="token operator">&gt;</span>Increase<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
				<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  最后运行渲染方法，将组件传入参数列表，我们上方定义的组件就会渲染至根元素下，作为其唯一的子元素。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Novae<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>TestComponent<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="加入虚拟路由" tabindex="-1"><a class="header-anchor" href="#加入虚拟路由" aria-hidden="true">#</a> 加入虚拟路由</h2>`,7),v=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>Novae<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
	<span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Score&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;/courses/:courseID/:SNo/score&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">component</span><span class="token operator">:</span> TestComponent
	<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;RegExp&quot;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^(\\/?regExp)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span>
		<span class="token function-variable function">getParams</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">name</span><span class="token operator">:</span> url<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;/&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">component</span><span class="token operator">:</span> TestComponent
	<span class="token punctuation">}</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>  配置完后您就可以在地址栏通过路径<code>#courses/123/456/score</code>（中间的两项可替换为任何合法的值，在<code>TestComponent</code>中可以通过<code>this.params.courseID</code>以及<code>this.params.sNo</code>进行获取），也可以由<code>#regExp/123</code>（<code>/123</code>可替换为其他值）转到。</p>`,2),m=s("code",null,"name",-1),b=s("code",null,"goTo",-1),h=s("code",null,'goTo("Score")',-1),g=s("code",null,'goTo("RegExp")',-1),f=s("h2",{id:"结语",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#结语","aria-hidden":"true"},"#"),n(" 结语")],-1);function _(y,x){const a=c("RouterLink");return l(),i("div",null,[u,s("p",null,[n("  首先引入双向绑定数据的有状态组件类"),t(a,{to:"/documents/components.html#autostatefulcomponent"},{default:e(()=>[n("AutoStatefulComponent")]),_:1}),n("。")]),d,s("p",null,[n("  我们以实现一个计数器为例，新定义一个组件类，并继承于"),t(a,{to:"/documents/components.html#autostatefulcomponent"},{default:e(()=>[n("AutoStatefulComponent")]),_:1}),n("。")]),k,s("p",null,[n("  如果想为组件设定对应的路径，需要以下方的形式定义路由条目，配置方法见"),t(a,{to:"/documents/router.html#%E9%85%8D%E7%BD%AE%E9%A1%B9"},{default:e(()=>[n("虚拟路由")]),_:1}),n("。")]),v,s("p",null,[n("  此外也可以通过"),m,n("字段，运行"),t(a,{to:"/documents/router.html#goto"},{default:e(()=>[b]),_:1}),n("方法转到，该例子就可以通过"),h,n("以及"),g,n("方法转到。")]),f,s("p",null,[n("  其他组件以及以上组件的进阶使用方法请移至"),t(a,{to:"/documents/"},{default:e(()=>[n("文档")]),_:1}),n("目录进行查看。")])])}const q=p(r,[["render",_],["__file","index.html.vue"]]);export{q as default};
